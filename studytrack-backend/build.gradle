plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.4'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'checkstyle'
    id 'com.github.spotbugs' version '6.0.26'
    id 'jacoco'
}

group = 'com.studytrack'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'org.postgresql:postgresql:42.7.3'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.6.0'
    
    // H2 데이터베이스 (로컬 개발 및 테스트용)
    runtimeOnly 'com.h2database:h2'
    
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // JWT 관련 의존성
    implementation 'io.jsonwebtoken:jjwt-api:0.12.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.5'
}

tasks.named('test') {
    useJUnitPlatform()
}

// Checkstyle 설정
checkstyle {
    toolVersion = '10.12.4'
    configFile = file("${project.rootDir}/config/checkstyle/checkstyle.xml")
}

checkstyleMain {
    source = 'src/main/java'
}

checkstyleTest {
    source = 'src/test/java'
}

// SpotBugs 설정
spotbugs {
    toolVersion = '4.8.2'
    effort = 'max'
    reportLevel = 'medium'
}

spotbugsMain {
    reports {
        xml.required = false
        html.required = true
    }
}

spotbugsTest {
    reports {
        xml.required = false
        html.required = true
    }
}

// JaCoCo 설정
jacoco {
    toolVersion = '0.8.11'
}

jacocoTestReport {
    reports {
        xml.required = true
        html.required = true
        csv.required = false
    }
    finalizedBy jacocoTestCoverageVerification
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.70 // 70% 최소 커버리지
            }
        }
        rule {
            enabled = true
            element = 'CLASS'
            excludes = [
                '*.dto.*',
                '*.config.*',
                '*.StudytrackBackendApplication*'
            ]
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.60 // 클래스별 60% 최소 커버리지
            }
        }
    }
}

test {
    finalizedBy jacocoTestReport
}

// 코드 품질 검사 활성화
tasks.named('check') {
    dependsOn(tasks.named('checkstyleMain'))
    dependsOn(tasks.named('checkstyleTest'))
    dependsOn(tasks.named('spotbugsMain'))
    dependsOn(tasks.named('jacocoTestCoverageVerification'))
}
