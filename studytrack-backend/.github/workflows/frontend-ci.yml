# 프론트엔드 CI/CD 파이프라인
# - React + TypeScript + Vite 프로젝트용 설정
# - 코드 품질 검사: ESLint, Prettier, TypeScript 컴파일 체크
# - 테스트 실행 및 커버리지 측정: Vitest + @vitest/coverage-v8
# - 최소 커버리지 70% 강제
name: Frontend CI

# 트리거 조건: main/develop 브랜치에 push하거나 PR 생성 시
# 단, studytrack-front 디렉토리 변경이 있을 때만 실행 (성능 최적화)
on:
  push:
    branches: [ main, develop ]
    paths: 
      - 'studytrack-front/**'                    # 프론트엔드 코드 변경시
      - '.github/workflows/frontend-ci.yml'      # 이 워크플로우 파일 변경시
  pull_request:
    branches: [ main, develop ]
    paths: 
      - 'studytrack-front/**'
      - '.github/workflows/frontend-ci.yml'

# 모든 명령어는 studytrack-front 디렉토리에서 실행
defaults:
  run:
    working-directory: studytrack-front

jobs:
  test:
    runs-on: ubuntu-latest
    # GitHub Actions 권한 설정
    permissions:
      contents: read          # 코드 읽기
      pull-requests: write    # PR에 댓글 작성 (커버리지 리포트)
      checks: write          # 체크 결과 작성

    steps:
    # 1. 소스코드 체크아웃
    - uses: actions/checkout@v4

    # 2. Node.js 20 설정 (LTS 버전) + npm 캐시
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'                                      # npm 의존성 캐시
        cache-dependency-path: studytrack-front/package-lock.json

    # 3. 의존성 설치 (npm ci: package-lock.json 기반 정확한 버전 설치)
    - name: Install dependencies
      run: npm ci

    # 4. ESLint 실행 (코드 품질 및 스타일 검사)
    - name: Run ESLint
      run: npm run lint

    # 5. Prettier 포맷 검사 (코드 포매팅 일관성 확인)
    - name: Run Prettier check
      run: npx prettier --check .

    # 6. TypeScript 컴파일 체크 (타입 에러 검사)
    - name: Run type check
      run: npx tsc --noEmit

    # 7. 단위 테스트 실행 및 커버리지 측정
    - name: Run tests with coverage
      run: npm run test:coverage

    # 8. 테스트 및 커버리지 결과 업로드 (실패시에도 업로드)
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()  # 테스트 실패해도 결과 업로드
      with:
        name: frontend-test-results
        path: studytrack-front/coverage/

    # 9. PR에 커버리지 리포트 댓글 자동 생성
    - name: Comment PR with Coverage
      if: github.event_name == 'pull_request'  # PR일 때만 실행
      uses: davelosert/vitest-coverage-report-action@v2
      with:
        json-summary-path: studytrack-front/coverage/coverage-summary.json
        json-final-path: studytrack-front/coverage/coverage-final.json
        vite-config-path: studytrack-front/vite.config.ts
        
    # 10. 프로덕션 빌드 실행 (배포 가능성 확인)
    - name: Build application
      run: npm run build

    # 11. 빌드 결과물 업로드
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: studytrack-front/dist/
